// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/lecture_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	models "web_service/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoLecture is a mock of RepoLecture interface.
type MockRepoLecture struct {
	ctrl     *gomock.Controller
	recorder *MockRepoLectureMockRecorder
}

// MockRepoLectureMockRecorder is the mock recorder for MockRepoLecture.
type MockRepoLectureMockRecorder struct {
	mock *MockRepoLecture
}

// NewMockRepoLecture creates a new mock instance.
func NewMockRepoLecture(ctrl *gomock.Controller) *MockRepoLecture {
	mock := &MockRepoLecture{ctrl: ctrl}
	mock.recorder = &MockRepoLectureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoLecture) EXPECT() *MockRepoLectureMockRecorder {
	return m.recorder
}

// AddUserToLecture mocks base method.
func (m *MockRepoLecture) AddUserToLecture(ctx context.Context, lecture *models.Lecture, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToLecture", ctx, lecture, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToLecture indicates an expected call of AddUserToLecture.
func (mr *MockRepoLectureMockRecorder) AddUserToLecture(ctx, lecture, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToLecture", reflect.TypeOf((*MockRepoLecture)(nil).AddUserToLecture), ctx, lecture, user)
}

// CreateLecture mocks base method.
func (m *MockRepoLecture) CreateLecture(ctx context.Context, lecture *models.Lecture) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLecture", ctx, lecture)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLecture indicates an expected call of CreateLecture.
func (mr *MockRepoLectureMockRecorder) CreateLecture(ctx, lecture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLecture", reflect.TypeOf((*MockRepoLecture)(nil).CreateLecture), ctx, lecture)
}

// DropUserFromLecture mocks base method.
func (m *MockRepoLecture) DropUserFromLecture(ctx context.Context, lecture *models.Lecture, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropUserFromLecture", ctx, lecture, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropUserFromLecture indicates an expected call of DropUserFromLecture.
func (mr *MockRepoLectureMockRecorder) DropUserFromLecture(ctx, lecture, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropUserFromLecture", reflect.TypeOf((*MockRepoLecture)(nil).DropUserFromLecture), ctx, lecture, user)
}

// GetLecturesAndStudentsPP mocks base method.
func (m *MockRepoLecture) GetLecturesAndStudentsPP(ctx context.Context, page, perPage int) ([]*models.Lecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturesAndStudentsPP", ctx, page, perPage)
	ret0, _ := ret[0].([]*models.Lecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturesAndStudentsPP indicates an expected call of GetLecturesAndStudentsPP.
func (mr *MockRepoLectureMockRecorder) GetLecturesAndStudentsPP(ctx, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturesAndStudentsPP", reflect.TypeOf((*MockRepoLecture)(nil).GetLecturesAndStudentsPP), ctx, page, perPage)
}
